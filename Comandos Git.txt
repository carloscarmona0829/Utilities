************ COMANDOS GIT ************
ls --> Lista los archivos de la carpeta en la que estoy actualmente
touch --> Crea un nuevo archivo ""
git init --> Inicializa una carpeta como repositorio GIT
git config --global user.name "" --> Establece el usuario del repositorio Git Hub 
git config --global user.email "" --> Establece el correo del repositorio Git Hub
git status --> Verifica el estado de los archivos
git add "" --> Adiciona archivos para cargar en el próximo Commit
git commit --> Realiza un Snap Shot de los archivos de un repo
git push --> Carga los archivos de la carpeta a Git Hub
git branch nombre de la rama --> Crea una nueva rama
git log --oneline --decorate --all --graph -->Resumen de la rama donde estoy parado (HEAD)
git checkout nombre rama -->se para en la rama de nombre rama
git branch -d nombre rama -->Borrar una rama

git pull origin master -->actualiza el repositorio local desde la rama master

--- SEND BREACK con la letra q ---


### Comandos básicos

- `git init`: se utiliza para iniciar nuestro repositorio.
- `git add ArchivoEjemplo.js`: crea el archivo pero no lo guarda de forma definitiva, lo almacena en (Staging Area).
- `git commit -m "versión 1"`: aquí se generan cambios de "Staging Area" y con ( -m "") se deja un mensaje que nos sea útil.
- `git add .`: Agrega los archivos actualizados al repositorio, pero únicamente en la carpeta que te encuentras.
- `git commit -m "Cambios v1"`: sirve para generar cambios sobre la versión antigua.
- `git status`: sirve para revisar si has modificado o guardado los cambios hechos.
- `git log "archivo.txt"`: sirve para ver el historial del archivo.
- `git push`: sirve para enviar cambios al repositorio remoto.
- `git pull`: sirve para recibir cambios de repositorio remoto a local.


### Comandos para mover archivos entre los estados de Git

- `git status`: nos permite ver el estado de todos nuestros archivos y carpetas.
- `git add`: nos ayuda a mover archivos del Untracked o Unstaged al estado Staged. Podemos usar git nombre del archivo o carpeta para añadir archivos y carpetas individuales o git add -a para mover todos los archivos de nuestro proyecto ( tanto Untrackeds como Unstageds).
- `git reset HEAD`: nos ayuda a sacar los archivos del estado Staged para devolverlos a su estado anterior. Si los archivos venian de Unstaged, vuelven alli. Y lo mismo si venian de Untracked.
- `git commit`: nos ayuda a mover archivos de Unstaged a Tracked. Esta es una ocasión especial, los archivos han sido guardados o actualizados en el repositorio. Git nos pedira que dejemos un mensaje para recordar los cambios que hicimos y podemos usar el argumento -m para describirlo ( git commit -m "mensaje").
- `git rm`: este comando necesita algunos de los argumentos para poder ejecutarse correctamente:
- `git rm --cached`: Mueve los archivos que le indiquemos al estado Untracked.
- `git rm --force`: Elimina los archivos de Git y del disco duro. Git guarda el registro de la existencia de los archivos, por lo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).


## Analizar cambios en los archivos de tu proyecto

- `git log`: muestra la identificación de los commits.
- `git show`: nos muestra los cambios que han existido sobre un archivo y es muy útil para detectar cuando se produjeron ciertos cambios, qué se rompió y cómo lo podemos solucionar. Pero podemos ser mas detallados.
- `git diff`: nos muestra la diferencia entre una version y otra, no necesariamente todos los cambios desde la creación. (Gif diff commitA commitB).

## Reset y checkout

- `git checkout + Id del commit`: podemos volver a cualquier versión anterior de un archivo específico o incluso
  de nuestro proyecto entero. Esta es también es la forma de movernos entre ramas.
- `git log --stat`: commit descriptivo con cantidad de líneas agregadas y removidas por archivo.
- `git reset --soft 'commit'`: mantiene los archivos en el área de Staging para que podamos aplicar nuestros últimos cambios desde un commit anterior.
- `git reset --hard 'commit'`: borra toda la información que tengamos en el área de Staging. (Perdiendo todo para siempre).
- `git checkout master 'archivo.txt'`: volvemos a la versión madre.


#### Buscar en archivos y commits de Git con ***grep*** y ***log***

A medida que nuestro proyecto se hace grande vamos a querer buscar ciertas cosas.
Por ejemplo: ¿Cuántas veces en nuestro proyecto utilizamos la palabra color?
Para buscar utilizamos el comando git grep color y nos buscará en todo el proyecto los archivos en donde está la palabra color.
- **Con git grep -n color** nos saldrá un output el cual nos dirá en que línea está lo qué estamos buscando.
- **Con git grep -c color** nos saldrá un output el cual nos dirá cuantas veces se repite esa palabra y en qué archivo.
Si queremos buscar cuántas veces utilizamos un atributo de HTML lo hacemos con **git grep -c "atributo"**.


******* create a new repository on the command line*******
echo "# Henry" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/carloscarmona0829/Henry.git
git push -u origin main

*************** push an existing repository from the command line ***************
git remote add origin https://github.com/carloscarmona0829/Henry.git
git branch -M main
git push -u origin main